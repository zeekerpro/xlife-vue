// Ascending
// Used to evaluate Sass maps like our breakpoints
@mixin _assert-ascending($map, $map-name){
	$prev-key: null;
	$prev-value: null;
	@each $key, $value in $map {
		@if $prev-value == null {
			// Do nothing
		} @else if not comparable($prev-value, $value) {
			@error "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$value} whose value unit make it incomparable with #{$prev-value}, the value of previous key #{$prev-key} !";
		} @else if $prev-value > $value {
			@error "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$value} which isn`t greater than ${prev-value}, this value of the previous key #{$prev-key}"
		}
		$prev-key: $key;
		$prev-value: $value;
	}
}

// Starts at 0
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name){
	$values: map-values($map);
	$first-value: nth($values, 1);
	@if $first-value != 0 {
		@error "Map #{map-name} must start at 0, but start at #{$first-value}"
	}
}
